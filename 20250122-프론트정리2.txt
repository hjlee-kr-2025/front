JS (Javascript, 자바스크립트)
- 웹사이트의 움직이는 효과, 동작에 관련된 일을 처리할때 사용합니다.

<script>
  이곳에 자바스크립트를 구현합니다.
</script>

sub.js 에 자바스크립트를 구현하고
HTML에서
<script src="sub.js"></script>  => <script src="sub.js" /> 로 사용할 수 도 있습니다.(시작태그와 종료태그사이에 구현할 내용이 없을때 시작태그 끝에 /로 사용할 수 있습니다.)
를 사용하여 불러옵니다.

자바스크립트 문법
1. 명령문 끝에는 ;를 붙인다.
2. 대소문자를 구별한다.
3. 주석은
   한줄주석 : // -> 슬러시두개사용
   여러줄주석 : /* 주석내용 */
한줄주석과 여러줄주석으로 구분해서 사용하는 이유는
아래와 같은 경우 1)번은 전체 블럭이 주석처리가 안됩니다.
2)번은 전체블럭이 주석으로 처리됩니다.
1)
/*
    sum = a + b; /* a와 b를 더한다 */
    sum = a * b; /* a와 b를 곱한다 */
    sum = a - b; /* a와 b를 곱한다 */
*/
2)
/*
    sum = a + b; // a와 b를 더한다 
    sum = a * b; // a와 b를 곱한다 
    sum = a - b; // a와 b를 곱한다 
*/

[[[[[ ch14 ]]]]] 자바스크립트 기본문법
*** 변수 선언 방법 (var 대신에 let 을 사용할 수도 있습니다)
var 변수이름;
var 변수이름=초기값;
var 변수이름1 , 변수이름2;
==> 자료형에 구분없이 var 또는 let으로 사용할 수 있습니다.
1. 변수이름은 영문자, 숫자, _ 를 사용할 수 있고, 첫글자로 숫자는 사용할 수 없습니다.
2. 변수이름은 가급적 의미를 알 수있도록 정하는 것이 좋습니다.
3. 변수이름은 camel 표기법, _표기법을 많이 사용합니다.
  * camel표기법
    maxCount 처럼 첫글자는 소문자로 시작하고 단어가 바뀔때 첫글자로 대문자로 작성하는 방법입니다.
  * _ 표기법
    max_count 처럼 소문자만 사용하는데 단어사이에 _를 붙여서 사용합니다.

const 는 상수(값을 변경할 수 없음)를 선언할 때 사용됩니다.
const 는 초기값과 함께 사용됩니다.

변수를 선언할 때 자료형에 따른 예약어 구분은 없으나, 자료형은 가지고 있습니다.
- 숫자형(number) : number= 3; number= 3.14; 처럼 숫자를 넣습니다.
- 문자형(string) : name="이현진"; 처럼 "" 나 '' 로 감싼 값을 넣습니다.
- 논리형(boolean) : true; false; 두가지 값중에 하나가 들어갑니다.
- 배열(array) : seasons = ['봄', '여름', '가을', '겨울']; 처럼 여러개의 값을 []안에 ,로 구분하여 넣습니다.
  배열에서 값을 가져올때 인덱스를 사용합니다.
  예) seasons에서 '여름'을 가지고 오고 싶으면 seasons[1] 로 접근하시면 됩니다. 인덱스는 0부터 시작됩니다. seasons안에 몇개의 데이터가 있는지 확인하려면 seasons.length 로 확인할 수 있습니다.
- 객체(object) : date = new Date(); 객체의 주소가 들어갑니다.

(연산자)
산술연산자 : + , - , * , / , % , ++ , -- : 더하기 , 빼기 , 곱하기 , 나누기 , 나머지, 1증가, 1감소
할당(대입)연산자
A = B; B를 A에 넣는다.
A += B; => A = A + B; A와 B를 더한후 A에 넣는다.
-= , *= , /= , %= 이 있습니다.
비교연산자
==(같다), !=(다르다), <(작다), <=(작거나같다), >(크다), >=(크거나같다)
===(값과 자료형이 같을때 참)
!==(값 또는 자료형이 다를때 참)
논리연산자
&& (AND), || (OR) , ! (NOT)

(조건문)
*** if
1)  if 단독으로
  if (조건) {
    조건이 참일때 실행문;
  }
2)  if ~ else
  if (조건) {
    조건이 참일때 실행문;
  }
  else {
    조건이 거짓일때 실행문;
  }
3)  if ~ elseif ~ else
  if (조건1) {
    조건1이 참일때 실행문;
  }
  else if (조건2) {
    조건1이 거짓이고, 조건2가 참일때 실행;
  }
  else {
    조건1과 조건2가 거짓일 때 실행;
  }
*** 3항연산자 (조건연산자)
  (조건) ? 참일때 : 거짓일때;

*** switch
  switch (변수) {
  case 값1:
    변수==값1 일때 실행;
    break; /* switch 문을 빠져나온다 */
  case 값2:
    변수==값2 일때 실행;
    break;
  default: /* 필수로 들어가는 것은 아니다 */
    변수가 값1도 아니고, 값2도 아닐때 실행
  }

(반복문)
*** for - 웹개발에서는 array변수와 같이 많이 사용됩니다.
  seasons = ['봄', '여름', '가을', '겨울']
  for (let i = 0 ; i < seasons.length ; i++) {
    console.log(seasons.[i]);
  }
  ===> for() { } 부분을 while문으로 변경하면 아래와 같이 됩니다.
  var i = 0;
  while (i < seasons.length) {
    console.log(seasons.[i]);
    i++;
  }

*** while
1) 조건을 비교해서 조건이 거짓이 될때까지 반복실행
  while (조건) {
    조건이 참이면 실행되고, 다시 while문으로 돌아갑니다.
    다시 조건을 비교해서 참이면 계속해서 반복실행이 됩니다.
  }
2) 무한반복실행 - 내부에 조건문으로 while문을 빠져나오게 설정정
  while (true) {
    실행문; // 무한반복실행
    if (조건) break;
  }
  ===> for문으로 무한반복
  for (;true;) {

  }


[[[[[ ch15 ]]]]] 함수와 이벤트
* 함수의 정의법
function 함수이름(매개변수) {
  함수에서 실행될 내용;
  return 값;
}
매개변수와 return 값; 을 생략될 수도 있습니다.
- 매개변수는 여러개 사용이 가능합니다. 여러개 들어갈때 ,로 구분해서 작성합니다.
- return 값; 에서 값(최종결과값)은 하나만 적을 수 있습니다. 
  return a + b; => a와 b를 더한값은 하나로 되어 사용할 수 있습니다.
* 함수의 사용
var result = 함수이름(매개변수에 들어갈 값);
- var result는 함수의 return이 있을때 사용
- 매개변수에 들어갈 값은 매개변수 선언한 수많큼 ,로 구분해서 값을 적습니다.


내장함수
alert("알림메시지");
var result = confirm("확인메시지");
var result = propmt("값을 입력해주세요");
console.log("콘솔창에 표시됩니다."); - 디버깅(오류수정)을 위해 많이 사용

--- 익명함수선언 및 사용
var sum = function(number1, number2) {
  return number1 + number2;
}
var result = sum(3, 4); 를 실행하면 result안에 7이 담깁니다.
일반함수 사용하듯이 변수이름에 ()를 붙여서 사용하시면 됩니다.
-> 익명함수와 비슷한 화살표함수
var sum = (number1, number2) => {
  return number1 + number2;
}
(이벤트와 이벤트처리기)
이벤트 - 웹브라우저 또는 사용자가 행하는 동작 (웹브라우저 안에서)
* 마우스 이벤트
  - click : 마우스 클릭
  - dbclick : 마우스 더블클릭
  - mouseover : 마우스 포인터가 위에 올라왔을때
  - mouseout : 마우스 포인터가 벗어났을때때
* 키보드 이벤트
  - keydown : 키보드를 누르는 동안 발생
* 문서로딩 이벤트
  - load : 문서 로딩이 끝나면(html내용이 다 올라오면)
* 폼 이벤트
  - change : <input>,<select>,<textarea>에서 사용되고, 값이 변경될때 발생
  - reset : 폼이 리셋되었을때(reset버튼 클릭시)
  - submit : submit버튼을 클릭했을때 발생

이벤트 등록
1. 태그에 속성으로 등록합니다. - 이벤트이름앞에 on을 붙여서 사용
  <a href="#" onclick="alert(Green을 클릭했습니다.)">Green</a>
  => Green글자를 클릭했을때 알림메시지를 표시하도록 합니다.
2. DOM을 이용한 이벤트 등록
  <button id="change">글자색 바꾸기</button>
  <p>문장내용</p>
  ==>
  <script>
  var changeBtn = document.querySeletor('#change');//id='change'인 element를 찾아서 changeBtn 변수에 연결합니다.

  changeBtn.onclick = changeColor; // DOM객체.이벤트속성 = 함수이름;
  function changeColor() {
    document.querySeletor("p").style.color = "red"; //p 태그를 찾아서 글자색을 빨간색으로 변경. 여기서는 "문장내용"이 빨간색이 됩니다.
  }
  ====>
  changeBtn.onclick = function () { // 이벤트 등록후 익명함수로 정의
    document.querySeletor("p").style.color = "red"; //p 태그를 찾아서 글자색을 빨간색으로 변경. 여기서는 "문장내용"이 빨간색이 됩니다.
  }
  </script>

[[[[[ ch16 ]]]]] 자바스크립트와 객체(Object)
객체 - 속성(변수) + 동작(함수)이 들어있는 요소
--- 내장객체
* Array 객체
var numbers = new Array();
var numbers = new Array(4);
var numbers = [];
var numbers = ['one', 'two', 'three', 'four'];
가장많이 쓰는 속성
numbers.length : numbers안에 몇개의 방이 있는지 알려줍니다.
Array 메서드의 내용은 P559 부터 설명이 되어있습니다.
표16-1 중 indexOf(): 문자열에서 특정단어를 찾을때 많이 사용합니다.
문자열도 하나의 배열로 처리할 수 있습니다.
var name="abcdefghijklmn";
name[2]; => c 를 가르킵니다.
name.length; => 14를 돌려줍니다.
name.indexOf("efg"); 일치되는 문자열을 찾고 첫인덱스를 돌려줍니다.
여기서는 4를 돌려줍니다.
만약에 일치하는 값이 없으면? -1을 돌려줍니다.

*** 브라우저와 관련된 객체
window객체
- 화면에 관계된 내용을 확인할 때 주로 사용됩니다.
- 팝업창을 만들거나 브라우저를 열어서 위치를 지정할 때 사용할 수 있습니다.
- document, screen, ...

[[[[[ ch17 ]]]]] 문서객체모델(DOM)
DOM - 자바스크립트를 이용하여 웹문서를 쉽게 제어가능하도록 만든것.
      (방법: element를 객체화 함)

DOM의 계층관계 설명그림 (p603, 그림 17-1)
-> 태그의 속성이나 text도 하나의 객체로 만들어집니다.
이것을 표현한 그림 DOM 트리 (p604, 그림 17-2)

DOM 트리안에 하나의 객체를 노드
노드에는 크게 3가지:
element(태그), attribute(태그속성+값), text(시작태그와 종료태그안에 들어가는 text)

DOM요소(element)에 접근하기 - CSS의 기본선택자를 생각하면 이해하기 쉽습니다.
- document.querySeletor("선택자");
  -> 하나의 element만 가져옵니다. html문서에 같은 선택자가 여러개 존재하면 제일 위에서부터 처음 찾는 것을 가져옵니다.

-> 선택자에 대한 설명은 CSS를 참고하세요

- document.querySelectorAll("선택자");
  -> 선택자로 지정된 모든 요소를 가져오는데, 배열처럼 사용하시면 됩니다. 하나만 찾았더라도 배열처럼 사용해야합니다.
  사용예)
  var box = document.querySelectorAll(".box");
  box[0].style.border = "1px solid black";// 반드시 index와 함께 사용
  ==> CSS에서는 클래스선택자로 한번에 스타일을 변경하지만, JS에서는 개별적으로 스타일을 변경해야 합니다. 같은 스타일로 변경하려면 반복문을 사용하시면 됩니다.

- document.getElementById("id값"); -> 선택자를 사용하는 것이 아닌 id값을 그대로 사용합니다.
  한개의 값만 가져옵니다.
  document.querySelector("#id값")와 유사.
- document.getElementsByClassName("class값");
  -> 사용시 배열처럼 인덱스와 함께 사용하셔야 합니다.
  -> document.querySelectorAll(".class값"); 과 유사.
- document.getElementsByTagName("태그명");
  -> 사용시 배열처럼 인덱스와 함께 사용.
  -> document.querySelectorAll("태그명"); 과 유사.


*웹요소의 내용을 수정하는: innerText, innerHTML 프로퍼티(속성)
innerText와 innerHTML은 지정된 element의 시작태그와 종료태그사이에 들어가는 값을 지정합니다.
innerText : 모든 글자가 text로 변경되어 적용
innerHTML : 태그는 element로 변경되고 다른요소는 text로 변경됩니다.
예)
<div id='current'><div>
===>
document.innerText = "이것은 <b>중요한</b> 내용입니다.";
==> 브라우저 화면에 아래와 같이 나옵니다.
  이것은 <b>중요한</b> 내용입니다.

document.innerHTML = "이것은 <b>중요한</b> 내용입니다.";
==> 이것은 중요한 내용입니다. // '중요한'은 굵은 글씨로 표현


* 속성을 가져오거나 수정하는 메서드: getAttribute(); setAttribute();
getAttribute("속성");
setAttribute("속성", "속성값");


**** DOM 에서 이벤트 처리하기
1. DOM요소에 함수 직접연결하기 (익명함수사용)
  <img src="../image/cup-1.png" id="cup">
  ==> 이미지를 클릭했을때 알림창이 나오도록하는 처리를 onclick에 익명함수를 사용해서 구현하였습니다.
  var cup = document.querySelector("#cup");
  cup.onclick = function() {
    alert("이미지를 클릭했습니다");
  }
2. 함수이름사용하기 -> 함수이름을 onclick에 대입시 ()는 사용하지 않습니다.
  var cup = document.querySelector("#cup");
  cup.onclick = clickImg;
  function clickImg() {/* 함수정의 */
    alert("이미지를 클릭했습니다.");
  }

** DOM의 event객체 (p614)
  var cup = document.querySelector("#cup");
  cup.onclick = function(event) {
    alert("이벤트 유형: " + event.type + ", 이벤트 발생 위치: " + event.pageX + ", " + event.pageY);
  }

** this 예약어 - 이벤트가 발생된 element를 가르킵니다.
  var cup = document.querySelector("#cup");
  cup.onclick = function() {
    alert("사용하는 이미지: " + this.src);// img태그에 있는 이미지 경로가 알림창에 보여지게 됩니다.
  }

** addEventListener() 메서드 : 이벤트를 연결해주는 역할을 합니다.
  var cup = document.querySelector("#cup");
  cup.addEventListener("click", clickImg);
  // cup객체(이미지)를 클릭하면 clickImg함수가 실행됩니다.
  // 이벤트 등록시 on이 빠지고 이벤트 이름만 들어갑니다.
  function clickImg() {/* 함수정의 */
    alert("이미지를 클릭했습니다.");
  }

addEventListener() 메서드를 사용했을때 장점
- addEventListener로 검색하면 사용하는 이벤트를 빨리 검색할 수 있습니다.

* addEventLister 에 익명함수로 연결하기
  cup.addEventListener("click", function() {
    alert("이미지를 클릭했습니다.");
  });

***** DOM 에서 노트 추가, 삭제하기
1. 노드 만들고 추가(연결)하기
  a) createElement("태그명")
  b) createTextNode("텍스트")
  c) 속성은 element가 있어야 적용할 수 있다.
  현재 HTML문서
  <body>
    <div id="info"></div>
    <script>
      // element node 만들기
      var newP = createElement("p"); // p태그를 사용한 element를 만듭니다. <p></p>
      // text node 만들기
      var newText = createTextNode("새로운 문장을 만들었습니다.");
      // newP 안에 newText를 연결시킵니다.
      newP.appendChild(newText); // <p>새로운 문장을 만들었습니다</p>
      // id='info'안에 newP를 연결합니다.
      document.getElementById("info").appendChild(newP);
      // => <div id="info><p>새로운 문장을 만들었습니다.</p></div>

    </script>
  </body>
document.getElementById("info").appendChild(newP);
는
var info = document.getElementById("info");
info.appendChild(newP);
와 동일한 명령입니다.

2. 노드 삭제하기
===> 노드는 스스로 삭제할 수 없습니다. 부모태그(element)에서 자식태그(element)를 삭제해야 합니다.
예)
  <ul id="studyList">
    <li>HTML</li>
    <li>CSS</li>
    <li>JAVASCRIPT</li>
  <ul>
  ===> 글자를 클릭시 리스트 내용이 삭제되도록 만들어봅니다.
  var items = document.querySelectorAll("li");
  for (let i = 0 ; i < items.length ; i++) {
    items[i].addEventListener("click", function() {
      if (this.parentNode) { // 부모노드가 있으면
        // 부모노드에서 자신을 삭제 합니다.
        this.parentNode.removeChild(this);
      }
    });
  }

