[[[[[ ch01 ]]]]]
웹개발 - HTML, CSS, JAVASCRIPT (웹브라우저) 
* HTML - 문서내용
* CSS - 꾸미기
* JS(JAVASCRIPT) - 동작

[[[[[ ch02 ]]]]] 개발환경설정 - 다른PC에 새로 개발환경을 만들때 참고하세요

[[[[[ ch03 ]]]]]
<!DOCTYPE html> -> HTML문서의 시작 : HTML5 문서임을 알려줍니다. -> 브라우저에게
1.  <html><head></head><body></body></html>
2.  <html>
      <head>
      </head>
      <body>
      </body>
    </html>

HTML 기본문서양식
<!DOCTYPE html>
<html>
  <head>
    <meta charset='utf-8'>
    <title>탭 제목</title>
  </head>
  <body>
    본문내용 - 보여주고자하는 모든 것
  </body>
</html>

웹문서 구조를 만드는 태그들 (block 요소 레벨)
** div
** 시맨틱태그(태그이름만 봐도 이 영역이 무엇을 표현하고자 하는지 알기 쉽도록 하는 태그들입니다.) : header, main, section, nav, footer, aside, article, ...

[[[[[ ch04 ]]]]]
<h1>~<h6> : 문단제목 또는 문서제목으로 사용하는 태그, 블럭레벨요소, 굵은글씨로 표현합니다. h1이 가장 큰 글씨, h6가 가장 작은 글씨
<p> : 텍스트 단락 (문단)
<br> : 화면에서 enter키 역할(<br>다음에 나오는 텍스트를 한줄 아래에 보여줍니다.) 
    ## 알아두어야 할 내용: HTML에서 연속된 스페이스, 탭, ENTER는 아무리 많아도 하나의 스페이스로만 보여줍니다. 그래서 <br>태그가 나왔습니다.
--- 글씨를 꾸며주는 태그들
<b>, <strong> : 굵은 글씨로 표현
<i>, <em> : 기울임체(이텔릭체)로 표현
<u>, <ins> : 밑줄글씨
<s>, <del> : 삭제글씨
--- 목록만드는 태그
<ol> : 순서가 있는 목록
  type='1' - 숫자(기본)
  type='A' - 대문자
  type='a' - 소문자
  type='I' - 로마대문자
  type='i' - 로마소문자
<li> : <ol> 또는 <ul> 태그 안에 쓰인다. li태그 하나당 하나의 리스트를 표합니다.
===> HTML코드에 아래와 같이 구현하면
<ol>
  <li>HTML</li>
  <li>CSS</li>
  <li>JS</li>
</ol>
===> 브라우저 화면에
    1. HTML
    2. CSS
    3. JS
<ul> : 순서가 없는 리스트, 숫자나 문자 대신에 검은색동그라미(DISC) 모양의 블릿이 앞에 나옵니다.
--- 표만들기
<table> : 표를 만드는 태그 (표를 구성태그들의 제일 상위 태그)
<caption> : 표 제목
<tr> : 행을 만드는 태그
<th><td> : 열(셀)을 만드는 태그
사용예) 2x2
<table>
  <caption>2x2 테이블</caption>
  <tr>
    <th>1행 1열(굵은글씨)</th>
    <th>1행 2열(굵은글씨)</th>
  </tr>
  <tr>
    <td>2행 1열(일반글씨)</td>
    <td>2행 2열(일반글씨)</td>
  </tr>
</table>
===> 태그를 사용한다고 표의 테두리가 나오지는 않습니다.
행 또는 열을 합치는 속성
rowspan ; 행을 합칩니다.
colspan : 열을 합칩니다.
--- 이미지를 삽입합니다.
<img> : 이미지를 화면에 표현합니다.
사용방법 ---> <img src="이미지경로" alt="이미지설명">
이미지경로는 경로와 이미지이름을 같이 표시하면됩니다.
alt속성의 '이미지 설명'은 이미지를 불러오지 못했을때 화면에 표시되는 내용입니다.
width 속성 : 가로크기지정
height 속성 : 세로크기지정
 - width 또는 height 속성 둘 중에 하나만 지정하면 다른 하나는 이미지 비율에 맞춰서 크기가 조절 됩니다.
--- 오디오 비디오
<audio src="오디오파일경로" controls></audio>
<video src="비디오파일경로" controls></video>
--- 하이퍼링크 삽입
<a> : 다른페이지로 이동하게 하게 태그, a태그 또는 앵커태그라고 불리웁니다.
사용예) '네이버' 텍스트를 클릭하면 네이버홈페이지로 이동
<a href="www.naver.com">네이버</a>
이미지를 클릭하면 이동하도록 할 수도 있습니다.
<a href="www.naver.com"><img src="네이버로고.png"></a>
속성 target="_blank"를 넣으면 새로운 탭을 만들고 페이지를 이동합니다.

[[[[[ ch05 ]]]]] 입력양식
<form> : 사용자의 입력을 서버로 전송할 때 사용 (GET, POST)
<fieldset> : 구역을 표시(라인) - 화면에 그룹처럼 보이도록
<legend> : 라인위에 그룹이름 표시
<label> : 폼요소 이름을 나타낼때 사용합니다.
    속성) for="id값" 으로 폼요소와 연결합니다.
<input> : 다양한 입력에 사용됩니다. 종료태그가 없다. 값은 value속성에 담깁니다.
  속성)
  type='text'(기본) : 한줄 텍스트 입력
  type='password' : 텍스트입력, 화면에 '*'등을 사용해서 텍스트를 가려서 표시합니다.
  type='email'  : 이메일 형식을 체크한다.
  type='date'   : 날짜입력
  type='time'   : 시간입력
  type='checkbox' : 체크박스로 만든다. (여러개 선택가능하도록)
  type='radio'    : 라디오 버튼으로 만든다. (여러개중 하나선택)
  ===> checkbox는 toggle(선택/선택해제 반복) 되지만 radio버튼은 선택만 됩니다.
  type='submit'   : 전송 버튼 (클릭시 서버에 데이터가 전송)
  type='reset'    : 데이터 초기화 버튼 (처음상태로 만들어 줍니다)
  type='button'   : 모양만 버튼입니다.
  type='file'     : 화일을 전송할 때 사용합니다.
  type='hidden'   : 화면에는 보이지 않지만 값을 숨겨서 전송할 때 사용합니다.
  required 속성 : 값이 반드시 있어야 합니다.
  readonly 속성 : 값이 화면에 보이지만 수정은 할 수 없습니다.
  placeholder 속성 : 이곳에 무엇을 작성해야 할지 설명해주는 속성, 한글자라도 입력되는 placeholder속성에 있는 값은 화면에서 사라집니다.
<textarea> : 여러줄의 텍스트 입력시 사용되는 태그입니다.
  cols와 rows를 지정해서 입력창크기를 조절합니다.
<select>, <option> : 드롭다운 메뉴
사용예)
    <select>
      <option>메뉴1</option>
      <option>메뉴2</option>
      <option>메뉴3</option>
    </select>  
  option의 속성>
    value : 서버로 넘길때 값
    selected : 선택된 메뉴(보여줄항목)
<button> : 버튼을 만들어 줍니다.  <button>버튼이름</button>
  속성)
    type="submit"
    type="reset"
    type="button"
    type설명은 input과 동일합니다.


[[[[[ ch06 ]]]]]  CSS
- 스타일 형식
선택자 {
  속성1 : 속성값1;/* 이곳을 주석입니다 */
  속성2 : 속성값2;
  속성3 : 속성값3;
  ...
}
- 스타일 적용 우선순위
1. 인라인 스타일적용 - 태그안에 style속성안에 구현
  예) <p style="color: blue;">이곳의 글자색은 파란색입니다</p>
2. 내부 스타일 시트 - <style>~</style> 태그안에 구현합니다.
  예) 모든 p 태그안의 글자색을 파란색으로 합니다.
  <style>
    p {
      color: blue;
    }
  </style>
3. 외부 스타일 시트 - style.css처럼 확장자가 css로 된 화일안에 구현합니다.
  예) style.css 파일을 html에 불러옵니다.
  <head>
    <title></title>
    <link rel="stylesheet" href="style.css">
  </head>
  == style.css에 내용 : 모든 p태그 글자색을 파란색으로
     (style태그는 사용하지 않습니다.)
  p {
    color: blue;
  }
4. 브라우저 디폴트 스타일
--- 선택자 (기본선택자)
1. 아이디 선택자 : id값으로 선택합니다.
  - id값 앞에 '#'을 붙여서 선택자로 사용합니다.
  - 중요: 하나만 선택합니다.
  예) body안에 id='box1'을 찾아서 테두리선을 적용합니다.
  <style>
  #box1 {
    border: 1px solid #222;
  }
  </style>
  ...
  <body>
    <div id='box1'>BOX1</div>
  </body>
2. 클래스 선택자 : class값으로 선택합니다.
  - class값 앞에 '.'을 붙여서 사용합니다.
  - 같은 class값 모두 스타일이 적용됩니다.
  예) class='container'를 찾아서 테두리선과 가운데 정렬을 적용합니다.
  <style>
    .container {
      border: 1px solid #222;
      margin: 0 auto;
    }
  <style>
  ...
  <body>
    <div class='container'>
      본문내용
    </div>
  </body>
3. 타입(태그)선택자 : 태그값으로 선택합니다. 태그이름 그대로 사용
    - 같은 태그이름 모두 style이 적용됩니다.
  예) p 태그를 찾아서 글자색을 blue색상으로 적용하세요
  <style>
  p {
    color: blue;
  }
  </style>
  ...
  <body>
    <h1>제목</h1>
    <p>문단1</p>
    <p>문단2</p>
  </body>
  => 문단1, 문단2 글자색이 파란색으로 적용됩니다.
4. 전체선택자: * 를 사용합니다.
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

만약에 여러개의 선택자에 같은 스타일을 적용하고 싶다면?
  선택자1, 선택자2, 선택자3 {
    속성: 속성값;
  }
으로 사용하시면 됩니다.
  예) 테이블 테두리선을 그려주고 테이블테두리와 셀테두리를 합치도록 만들어 줍니다.
  table, th, td {
    border: 1px solid #222;
    border-collapse: collapse;
  }

[[[[[ ch07 ]]]]]
- 글꼴을 지정합니다 -> font-family: <글꼴이름>;
  예) font-family: '맑은 고딕', 고딕, 명조;
  => 두단어 이상의 이름을 가진 폰트는 ''또는 ""로 묶어줍니다.
- 글꼴의 크기를 지정합니다.
  -> font-size: <절대크기> | <상대크기> | <크기> | <백분율>;
  font-size의 값은 단위와 함께 사용됩니다.
  -> px, pt, em(부모요소), rem(최상위요소), %(부모요소)
  -> 기본크기: 16px, 12pt 정도입니다.
- 기울임 글씨 -> font-sytle : normal | italic;
- 글자 굵기 지정 -> font-weight : normal | bold | lighter | 100 | ... | 900;
  -> 100이 제일 가늘고, 900이 제일 굵은 글씨입니다.
- 웹폰트 : 웹폰트 배포처에 사용방법이 기술되어있습니다.

- 글자색 -> color: <컬러값>;
  컬러값은 어떻게 표현할까요?
  1. 16진수 표현법
    #fff : 3자리 (R, G, B를 각각 1자리씩 표현, 0~15)
    #ffffff : 6자리 (R, G, B를 각각 2자리씩 표현, 0~255)
  2. rgb() 함수사용
    rgb(R, G, B)
  3. rgba() 함수사용
    rgba(R, G, B, A) -> A값은 0~1, 소숫점가능, 1이면불투명 값이 작아질수록 투명해 집니다.
  4. 색상명사용 (CSS3에서는 140개의 컬러명이 있습니다.)
- 텍스트를 정렬 -> text-align : left | right | center | justify;
    left: 왼쪽 정렬
    right: 오른쪽 정렬
    center: 가운데 정렬
    justify: 양쪽 정렬
- 줄간격 조절 -> line-height: <속성값>
  예) font-size: 12px; 인 요소의 줄사이에 비어있는 공간을 12px로 만들려고 한다면?
  p {
    font-size: 12px;
    line-height: 24px | 2.0 | 200%; -> 세가지중 하나 사용가능
  }
  예) box(블럭레별요소)에서 한줄로 되어있는 글자를 세로 중앙에 오도록 만들고 싶다면?
  p {
    height: 100px;
    line-height: 100px;
  }
  위에서 사용한것 처럼 height 값과 line-height 값을 같도록 해줍니다.
- 텍스트의 줄을 표시하거나 없애줍니다.
  -> text-decoration: none | underline | line-through;
                     (줄없음 | 밑줄글씨 | 삭제글씨)
- 텍스트에 그림자 효과
  -> text-shadow: <가로거리> <세로거리> <번짐정도> <그림자색상>;
  가로거리는 오른쪽방향, 세로거리는 아래방향
- 텍스트의 대소문자 변경
  -> text-transform: capitalize | uppercase | lowercase;
                 (첫글자대문자 | 전체대문자 | 전체소문자)
- 글자간격조절 -> letter-spacing: <값>;
  -> 만약에 글자사이에 한글자가 들어가도록 간격을 준다면?
    letter-spacing: 0.5em | 50%; 반글자 크기로 설정
    -> 양쪽 반글자씩해서 한글자간격이 됩니다.
- 목록 스타일 -> ul태그 또는 ol태그에 사용됩니다.
  -> list-style-type: none | disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha;
- 이미지 목록 스타일 -> 블릿대신에 이미지를 사용
  -> list-style-image: url('이미지파일경로');
- 목록을 들여쓸때 사용합니다
  -> list-style-position: outside(기본) | inside;
- (표스타일)
- 표제목 위치 -> <caption>태그위치
  -> caption-side: top(기본) | bottom;
  -> 하단에 표시할때만 주로 사용됩니다. (caption-side: bottom;)
- 표와 셀의 테두리를 만들때
  -> border: 1px solid #222; 선두께, 선모양, 색상을 한번에 지정해서 사용용
- 표와 셀사이의 여백을 지정
  -> border-spacing: 수평거리 수직거리;
- 표와 셀의 테두리를 합칩니다.
  -> border-collapse: collapse; (통채로 알아두세요)

[[[[[ ch08 ]]]]] CSS 박스 모델
- 블록레벨요소 / 인라인레벨요소
  => 블록레벨요소 : 1줄을 전부 차지합니다.
  => 인라인레벨요소 : 옆으로 배치가 가능합니다.

margin - border - padding - 콘텐츠
- 콘텐츠 영역의 크기를 지정하는 속성
  => width : 폭크기; height : 높이크기;
- width와 height로 설정한 값의 영역지정
  => box-sizing: content-box(기본) | border-box;
                 콘텐츠만 | 테두리까지
- box모델에 그림자 효과 (p246)
  => box-shadow: <수평거리> <수직거리> <흐림정도> <번짐정도> <색상>;
- 테두리의 스타일 지정
  => border-style: none(기본값) | solid | dotted | dashed | double;
                      (없음   |  실선  | 점선   | 짧은실선 | 이중선)
- 테두리 두께
  => border-width: <크기>;
  => 4방향을 다르게 설정할 수도 있습니다. (위 오른쪽 아래 왼쪽순)
    예) border-width: 1px 2px 3px 4px;
- 테두리 색상
  => border-color: <컬러값>;
  => 4방향을 다르게 설정할 수 있습니다.
- 테두리 스타일 한번에 설정
  => border: 1px solid red; -> 1px 두께의 빨간색실선으로 테두리를 그려줍니다.
- 테두리를 둥글게
  => border-radius: <크기> | <백분율>;
  => 원형으로 만들려면 정사각형의 콘텐츠에 border-radius: 50%; 로 설정하면 됩니다.
- 외부여백설정
  => margin: <값>;
  => 4방향 각각 지정가능
  margin; 0 auto; /* 가운데 정렬 하고자 할때 이렇게 많이 사용합니다 */
  2개의 값을 지정하면 앞의 값은 위/아래여백, 두번째값은 좌/우여백 설정입니다.
  => 위, 아래여백은 중첩적용되어 두요소중 큰값으로 설정됩니다.
- 내부여백설정 (테두리와 콘텐츠사이의 여백) 
  => padding: <값>;
  margin과 padding다음에 -top, -bottom, -left, -right를 사용해서 각각 설정이 가능합니다.
  예) 위 외부여백 10px 설정 => margin-top: 10px;
- 배치방법을 설정하는 속성
  => display: block | inline | inline-block | none;
       (블록레벨요소 | 인라인레벨요소 | 인라인 | 안보이도록)
- 오른쪽이나 왼쪽으로 배치하는 속성
  => float: left | right;
        (왼쪽배치 | 오른쪽배치)
- float 해제
  => clear: left | rigth | both;
- 웹요소의 위치를 지정하는 속성4가지
  => left, right, top, bottom => 기준으로부터 얼마나 떨어져 있는지를 설정합니다. 예를들어 left:10px; 으로 설정하면 기준위치에서 왼쪽으로 10px 만큼 떨어지 있다는 이야기 입니다.
  left와 right는 동시에 설정하지 않고, top과 bottom도 동시에 설정하지 않습니다.
- 배치방법을 지정하는 속성
  => position: static(기본) | relative | absolute | fixed;
    (기본 | 상대위치 |  상위<상대위치> 기준 절대위치 | 브라우저기준)

[[[[[ ch09 ]]]]]  배경 (background)
- 배경색을 지정하는 속성
  => background-color: <색상값>;
- 배경색 범위
  => background-clip: border-box | padding-box | content-box;
                   (테두리까지 | 패딩영역까지 | 콘텐츠만)
- 배경이미지
  => background-image: url("이미지 파일 경로");
- 배경이미지 반복
  => background-repeat: repeat(기본) | repeat-x | repeat-y | no-repeat;
    (전체그려줄때까지 반복 | x축으로만 반복 | y축으로만반복 | 1장사용)
- 배경이미지 위치 설정
  => background-position: <수평위치> <수직위치>;
    수평위치 = left | right | center | <백분율> | <길이값>;
    수직위치 = top | bottom | center | <백분율> | <길이값>;
- 배경이미지 표시 범위 설정
  => background-origin: border-box | padding-box | content-box;
- 배경이미지를 스크롤했을때 고정시키려면?
  => background-attachment: fixed; (기본값은 scroll)
- 배경이미지 한번에 설정 (사용예)
  => background: url('이미지경로') no-repeat center bottom fixed;
- 배경이미지 크기를 조절
  => background-size: auto(기본) | contain | cover | <크기값> | <백분율>;
  -> 두개의 크기값또는 백분율을 사용해서 가로, 세로를 동시에 설정할 수 있습니다.
  contain : 이미지크기의 길이가 긴쪽을 설정값에 맞추고 다른값은 비유로 조절합니다. 공백이 보일수도 있습니다.
  cover : 짧은쪽을 설정값에 맞춥니다. 그래서 화면은 꽉차지만 긴쪽의 이미지가 잘릴수도 있습니다.
  contain과 cover의 설명은 p302 그림9-5를 살펴보시면 이해가 되실 것입니다.
- 선형 그라데이션
  => line-gradient(to <방향> 또는 <각도>, 시작색상 끝색상);
  사용예) line-gradient(to right bottom, blue, white);
      오른쪽 아래방향으로 파란색에서 흰색으로 변경된 색상을 표현
- 원형 그라데이션
  => radial-gradient(모양 위치, 중심색상, 중간색상, 끝색상);

[[[[[ ch10 ]]]]] 고급선택자
선택자 {
  속성1: 속성값1;
  속성2: 속성값2;
  ...
}
(기본선택자)
1. 아이디선택자 : 태그안에 id속성을 설정하고 설정된 id값을 선택자로 사용하는 방법 - '#id값' 으로 표현됩니다. - 하나만 선택됩니다.
  <div id="box1">box1</div>
  위와 같은 HTML을 사용했을때 스타일을 준다면
  #box1 {
    border: 1px solid blue;/* id='box1'으로 되어있는 element에 1px두께의 파란색 직선으로 테두리를 그려주세요 */
  }
2. 클래스선택자 : 태그안에 class속성값을 설정하고 선택자로 사용합니다 - '.class값' 으로 표현됩니다. - 같은 클래스값이 있는 모든 element의 스타일이 적용됩니다.
  <div class="box" id="box1">box1</div>
  <div class="box" id="box2">box2</div>
  ==>
  .box { /* 클래스선택자 */
    border: 1px solid black; /* class='box'로 설정된 두 element 모두 1px두께의 검정색 실선으로 테두리를 그립니다.
  }
  #box1 { /* 아이디선택자 */
    color: blue; /* box1글자만 파란색으로 변경됩니다 */
  }
3.타입선택자(태그선택자) : 태그이름을 선택자로 사용합니다. - 같은 태그이름 모두 스타일이 적용됩니다.
  <div class='box' id='box1>box1</div>
  <div class='box' id='box2>box2</div>
  <div>box3</div>
  ==>
  div { /* 타입(태그)선택자 */
    border: 1px solid black; /* 3가지 모두 1px 검정색 실선으로 테두리 만든다 */
  }
  .box {  /* 클래스선택자 */
    background-color: yellow; /* class='box'를 가진 box1, box2만 배경색이 노란색으로 적용 */
  }
  #box1 { /* 아이디선택자 */
    color: blue; /* box1글자만 파란색으로 적용 */
  }
4. 전체선택자 : * 로 사용
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

==== 여러개의 다른 element에 동일한 스타일적용방법
선택자1, 선택자2, 선택자3 {
  속성1: 속성값1;
}
===> 선택자와 선택자 사이에 ,를 사용하면 됩니다.
table, th, td {
  border: 1px solid black;
}

(연결선택자) - 앞의 선택자를 기준으로 동일레벨또는 하위레벨을 선택합니다.
--- 하위선택자
방법) 상위선택자와 하위선택자 사이에 공백을 둡니다.
  상위선택자 하위선택자 {
    속성: 속성값;
  }
  => 상위선택자 안에 존재하는 하위선택자 전체의 스타일이 변경됩니다.
  <section>
    <h2>제목1<h2>
    <ul>
      <li><h2>내용1</h2><li>
      <li><h2>내용2</h2><li>
    </ul>
    <h2>제목2<h2>
  </section>
  위와 같은 코드에 아래스타일을 적용한다면?
  section h2 {
    color: blue;
  }
  ===> 제목1, 내용1, 내용2, 제목2 글자색이 모두 파란색으로 변경됩니다.
--- 자식선택자
방법) 부모선택자 와 자식선택자 사이에 > 를 사용합니다.
  부모선택자 > 자식선택자 {
    속성: 속성값;
  }
  ==> 부모선택자 한단계 아래에 존재하는 자식선택자만 스타일적용
  <section>
    <h2>제목1<h2>
    <ul>
      <li><h2>내용1</h2><li>
      <li><h2>내용2</h2><li>
    </ul>
    <h2>제목2<h2>
  </section>
  위와 같은 코드에 아래스타일을 적용한다면?
  section > h2 {
    color: blue;
  }
  ===> 제목1, 제목2 만 글자색이 파란색으로 변경됩니다.
  section > ul > li > h2 {
    color: red;
  }
  ===> 내용1, 내용2 만 글자색이 빨간색으로 변경됩니다.

--- 인접형제선택자
방법) 선택자와 선택자 사이에 + 를 사용합니다.
  선택자1 + 선택자2 {
    속성: 속성값;
  }
  ==> 선택자1을 기준으로 같은 레벨에 있는 요소중 처음만나는 선택자2 만 스타일이 적용됩니다. -- 1개만 적용되는 선택자
  예)
  <h2>제목</h2>
  <p>내용1</p>
  <p>내용2</p>
  <p>내용3</p>
  <p>내용4</p>
  ===>
  h2 + p {
    color: blue;
  }
  => 내용1만 글자색이 파란색으로 변경됩니다.
--- 형제선택자
방법) 선택자와 선택자 사이에 ~ 를 사용합니다.
  선택자1 ~ 선택자2 {
    속성: 속성값;
  }
  ===> 선택자1과 같은레벨에 있는 선택자2 모두 스타일이 적용
  예)
  h2>제목</h2>
  <p>내용1</p>
  <p>내용2</p>
  <p>내용3</p>
  <p>내용4</p>
  ===>
  h2 ~ p {
    color: red;
  }
  ===> 내용1, 내용2, 내용3, 내용4 가 글자색이 빨간색으로 변경
  h2에는 적용되지 않습니다.
  만약에 h2에도 같이 적용하려면?
  h2, h2 ~ p {
    color: red;
  }
  처럼 구현해 주시면 됩니다.
(속성선택자, p326) - 특정속성이 있는 요소를 선택합니다.
--- 속성선택자
  a[href] {
    text-decoration: none;/* a태그의 밑줄글씨를 일반글씨로 적용 */
  }
  ===> a 태그중 href 속성이 있는 element만 스타일이 적용됩니다.
--- [속성=속성값] 을 사용하는 선택자
  예)
  <a href="www.naver.com" target="_blank">네이버</a>
  <a href="www.daum.com" target="_self">다음</a>
  ==> 위 코드에 아래 스타일을 적용하면
  a[target="_blank"] {
    color: green;
  }
  ==> 네이버 글자만 green으로 변경됩니다.
--- [속성~=속성값] : 속성중 속성값이 포함되는 element 선택
  예)
  <ul>
    <li><a href="#" class="button">메뉴1</a></li>
    <li><a href="#" class="flat">메뉴2</a></li>
    <li><a href="#" class="flat">메뉴3</a></li>
    <li><a href="#" class="flat button">메뉴4</a></li>
  </ul>
  ===>
  a[class ~= "button"] {
    color: blue;
  }
  ===> 메뉴1, 메뉴4의 글자색만 blue로 변경경
--- [속성|=값] : 속성값이 값이거나 값-로 시작할때 선택
  예)
  <ul>
    <li>외국어서비스</li>
    <li><a href="#" title="us-english">영어</a></li>
    <li><a href="#" title="japan">일본어</a></li>
    <li><a href="#" title="chn">중국어</a></li>
  </ul>
  ==>
  a[title |= "us"] {
    color: red;
  }
  a[title |= "jap"] {
    color: blue;
  }
  a[title |= "chn"] {
    color: green;
  }
  ===> 영어: 빨간색, 중국어: 녹색 으로 적용, 일본어는 적용안됨
--- [속성^=값] : 값으로 시작할 때
  예)
  <ul>
    <li>외국어서비스</li>
    <li><a href="#" title="us-english">영어</a></li>
    <li><a href="#" title="japan">일본어</a></li>
    <li><a href="#" title="chn">중국어</a></li>
  </ul>
  ==>
  a[title ^= "us"] {
    color: red;
  }
  a[title ^= "jap"] {
    color: blue;
  }
  a[title ^= "chn"] {
    color: green;
  }
  ===> 영어, 일본어, 중국어 스타일 적용
--- [속성$=값] --- 속성값이 값으로 끝나는 element를 선택
  ==> 화일의 확장자를 찾을때 많이 사용합니다.
--- [속성*=값] --- 속성값에 어느위치던 값이 포함되어 있다면 선택
(가상클래스와 가상요소, p336)
--- :hover
  예)
  <ul>
    <li>메뉴1</li>
    <li>메뉴2</li>
    <li>메뉴3</li>
    <li>메뉴4</li>
  </ul>
  ==>
  li:hover {/* 마우스커서가 올라왔을때 */
    background-color: black;
    color: white;
  }
  ===> 마우스 커서가 올라온 메뉴만 배경색이 검정색으로 글자가 흰색으로 변경됩니다.
--- :checked
  <ul>
    <li>
      <input name="menu" class="menu" type="radio" id="menu1">
      <label for="menu1">메뉴1</label>
    </li>
    <li>
      <input name="menu" class="menu" type="radio" id="menu2">
      <label for="menu2">메뉴2</label>
    </li>
  </ul>
  ===>
  input:checked + label {
    color: red;
  }
  ===> 라디오버튼이 선택된 곳의 글자색을 빨간색으로 변경

[[[[[ ch11 ]]]]] 트랜지션과 에니메이션
--- transform속성과 변형함수
사용법) transform: 변형함수;
    예) .photo {transform: translate(50px, 100px);}
        => class='photo'로 설정되어있는 element를 x축으로 50px, y축으로 100px 이동합니다.
*** 2차원 변형함수 (p357, 표11-1)
- translate(x, y) : x축으로 x만큼, y축으로 y만큼 이동
  => translateX(x), translateY(y) 로 각각 변형할 수 있다.
- scale(x, y) : x축으로 x만큼, y축으로 y만큼 확대
  => scaleX(x), scaleY(y) 로 각각 변형할 수 있다.
- rotate(각도) : 각도만큼 회전 - 위를 기준으로 오른쪽방향회전전
*** 3차원 변형함수는 책을 참고하세요 (p358, 표11-2)

--- transition 속성 (p368)
- transition-property : 트랜지션 대상 지정
- transition-duration : 실행되는 시간
- transition-timing-function : 실행 형태
- transition-delay : 지연시간 설정
- transition : 위의 4가지를 한꺼번에 설정.
*** transition-property: all | none | <속성이름>;
   all(전체속성, 기본값) | 지정안함 | 적용할 속성(특정속성만 적용할 때)
   -- 두가지 이상의 속성을 지정할때는 ,로 구분합니다.
*** transition-duration: <시간>; /* 1s, 2s, 3s: 숫자에 s를 붙이면 초입니다. */   
*** transition-timing-function: linear | ease | ease-in | ease-out;
    - linear : 균일하게 시간으로 동작
    - ease(기본값) : 처음에 천천히 시작 점점빨라지다가 마지막에 천천히 끝남
    - ease-in : 느리게 시작
    - ease-out : 느리게 끝남남
==> 우리가 실습했던 ch11의 tr-function.html을 실행해서 비교해 보세요.
*** transition-delay: <시간>; /* 시작시 지연시간 설정 */
--- 에니메이션 (p377)
@keyframes <이름> {
  from {
    스타일1;
  }
  to {
    스타일2;
  }
}
===> 스타일1번에서 스타일2번으로 변경되는 에니메이션
예) 
  <div class="box" id="box1">box1</div>
  =>
  @keyframes shape {
    from {border: 1px solid transparent;}
    to {
      border: 1px solid black;/* 테두리를 검정색으로 */
      border-radius: 50%; /* 사각형을 원형으로 */
    }
  }
  #box1 {
    background-color: green;
    border: 1px solid transparent; /* 1px 투명테두리 */
    animation-name: shape; /* 키프레임 이름을 animaition-name 값으로 설정합니다. */
    animation-duration: 3s; /* 동작시간 */
    animation-iteration-count: infinite; /* 무한반복 */
  }


[[[[[ ch12 ]]]]] 반응형 웹과 미디어 쿼리
*반응형 웹 - 브라우저의 가로size에 따라서 화면배치(스타일)를 자동으로 변경시켜주도록 하는 것
@media screen and (min-width: 값) and (max-width: 값) {
  /*스타일 코드*/
  선택자 {
    속성1: 속성값;
  }
}
===> 화면크기가 min-width값이상이고, max-width값 이하일때 적용하는 style을 @media 쿼리 안에 구현해 줍니다.

반응형웹을 구현할때는 외부css화일을 주로 사용하는데
import할때 조건을 주어 import시킵니다.
예)
<style>
@import url("css/style1.css") screen and (min-width: 값1) and (max-width: 값2);
</style>
--- 그리드 레이아웃 : 플렉서블 박스 레이아웃 / CSS 그리드 레이아웃
P412 - 플렉스 박스 레이아웃
큰 컨테이너(박스, 부모요소)에 작은 박스를 넣듯이 배치하는 방법
부모선택자에 display: flex; 로 설정해서 자녀들이 플렉스박스 레이아웃방식으로 배치된다는 것을 알려줍니다.
* p414 에 flex-direction 속성은 배치 방향을 설정합니다.
flex-direction: row | row-reverse | column | column-reverse;
* 줄을 바꾸는 속성 : flex-wrap
flex-wrap: nowrap | wrap | wrap-reverse;
  nowrap은 한줄에 배치
  wrap은 부모박스 크기를 벗어나면 아래줄로 배치
  wrap-reverse는 부모박스 크기를 벗어나면 윗줄로 배치

===> 위 두가지 속성을 하나로 설정하는 flex-flow를 많이 사용합니다.
예) flex-flow: row wrap;

* 플렉스 항목 간격적용
justify-content: flex-start | flex-end | center | space-between | space-around; (p417, 그림12-22참고)
  flex-start: 왼쪽정렬
  flext-end: 오른쪽정렬
  center: 가운데 정렬
  space-between: 양쪽정렬(좌,우배치 우선적용후 등간격)
  space-around: 등간격정렬(외부여백중 좌우여백크기를 동일하게)
* 교차축 정렬
align-items: flex-start | flex-end | center | baseline | streth; (p418, 그림12-23 참고)
  flex-start: 위쪽 기준 배치
  flex-end: 아래쪽 기준 배치
  center: 가운데 기준 배치
  bassline: 문자를 기준으로 배치
  stretch: 박스을 위/아래여백없이 채우는 배치

p423 CSS 그리드 레이아웃
CSS 그리드 레이아웃을 사용하려면
부모요소에
display: grid;
grid-template-columns: 200px 200px 200px; /*한줄에 너비가 200px인 칼럼 3개 */
grid-template-rows: 100px; /* 여러줄이 될 경우 한줄의 높이는 100px로 설정 */
로 설정합니다.
grid-template-columns: 1fr 1fr 1fr; /* 이런 형태로 더 많이 설정합니다
한줄을 3등분한다는 의미입니다. repeat(3, 1fr) 이것도 같은 의미입니다.*/

박스를 배치할 때는 그리드 라인을 이용합니다.
        1     2       3     4
        --------------------     1
        |     |       |     |
        --------------------     2
        |     |       |     |
        --------------------     3
        |     |       |     |
        --------------------     4

#box1 {
  grid-column: 1/4; /* box1의 가로크기를 1번에서 시작에서 4번까지 로 한다는 의미입니다 grid-colume-start:1; grid-column-end:4; */
}
#box2 {
  grid-row: 2/4; /* box2의 세로크기를 2번에서 4번까지. grid-row-start:2; grid-row-end:4; 와 동일 */
}